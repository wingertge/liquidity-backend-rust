initSidebarItems({"attr":[["graphql_object","The `object` proc macro is the primary way of defining GraphQL resolvers that can not be implemented with the GraphQLObject derive."],["graphql_union",""]],"derive":[["GraphQLEnum",""],["GraphQLInputObject",""],["GraphQLObject",""],["GraphQLScalarValue","This custom derive macro implements the #[derive(GraphQLScalarValue)] derive."]],"enum":[["Applies","An enum that describes if a field is available in all types of the interface or only in a certain subtype"],["DefaultScalarValue","The default scalar value representation in juniper"],["GraphQLError","An error that prevented query execution"],["InputValue","A JSON-like value that can be passed into the query execution, either out-of-band, or in-band as default variable values. These are not constant and might contain variables."],["IntrospectionFormat","The desired GraphQL introspection format for the canonical query (https://github.com/graphql/graphql-js/blob/8c96dc8276f2de27b8af9ffbd71a4597d483523f/src/utilities/introspectionQuery.js#L21)"],["LookAheadValue","A JSON-like value that can is used as argument in the query execution"],["Selection","Entry in a GraphQL selection set"],["Type","A type literal in the syntax tree"],["TypeKind","GraphQL type kind"],["Value","Serializable value returned from query and field execution."]],"fn":[["execute","Execute a query in a provided schema"],["execute_async","Execute a query in a provided schema"],["introspect","Execute the reference introspection query in the provided schema"]],"macro":[["graphql_interface","Expose GraphQL interfaces"],["graphql_scalar",""],["graphql_value","Construct JSON-like values by using JSON syntax"]],"mod":[["http","Utilities for building HTTP endpoints in a library-agnostic manner"],["integrations","Provides GraphQLType implementations for some external types"],["meta","Types used to describe a `GraphQL` schema"],["parser","Query parser and language utilities"]],"struct":[["Arguments","Field argument container"],["EmptyMutation","Utillity type to define read-only schemas"],["ExecutionError","Error type for errors that occur during query execution"],["Executor","Query execution engine"],["FieldError","Error type for errors that occur during field resolution"],["ID","An ID as defined by the GraphQL specification"],["LookAheadArgument","An argument passed into the query"],["LookAheadSelection","A selection performed by a query"],["Object","A Object value"],["Registry","A type registry used to build schemas"],["RootNode","Root query node of a schema"],["RuleError","Query validation error"]],"trait":[["Context","Marker trait for types that can act as context objects for `GraphQL` types."],["FromContext","Conversion trait for context types"],["FromInputValue","Parse an unstructured input value into a Rust data type."],["GraphQLType","Primary trait used to expose Rust types in a GraphQL schema"],["GraphQLTypeAsync",""],["IntoFieldError","Custom error handling trait to enable Error types other than `FieldError` to be specified as return value."],["LookAheadMethods","A set of common methods for `ConcreteLookAheadSelection` and `LookAheadSelection`"],["ParseScalarValue","A trait used to convert a `ScalarToken` into a certain scalar value type"],["ScalarValue","A trait marking a type that could be used as internal representation of scalar values in juniper"],["ToInputValue","Losslessly clones a Rust data type into an InputValue."]],"type":[["BoxFuture","A pinned, boxed future that can be polled."],["ExecutionResult","The result of resolving an unspecified field"],["FieldResult","The result of resolving the value of a field of type `T`"],["ParseScalarResult","The result of converting a string into a scalar value"],["Variables","The map of variables used for substitution during query execution"]]});