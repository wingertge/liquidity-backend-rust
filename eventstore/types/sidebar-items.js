initSidebarItems({"enum":[["ExpectedVersion","Constants used for expected version control. The use of expected version can be a bit tricky especially when discussing assurances given by the GetEventStore server."],["LinkTos","Determines whether any link event encountered in the stream will be resolved. See the discussion on Resolved Events for more information on this."],["LocatedEvents","Indicates either if we reach the end of a stream or a slice of events when reading a stream. `LocatedEvents` is polymorphic so it can be used by either '$all' stream (that requires `Position`) and regular stream that requires event sequence numer."],["NakAction","Gathers every possible Nak actions."],["NodePreference","Indicates which order of preferred nodes for connecting to."],["OnEventAppeared","Outcome to returns when a subscription dispatches an event."],["PersistActionError","Enumerates all persistent action exceptions."],["PersistActionResult","Represents the different scenarios that could happen when performing a persistent subscription."],["ReadDirection","Represents the direction of read operation (both from '$all' and a regular stream)."],["ReadEventStatus","Enumeration detailing the possible outcomes of reading a stream."],["ReadStreamError","Represents the errors that can arise when reading a stream."],["ReadStreamStatus","Represents the result of reading a stream."],["Retry","Represents a reconnection strategy when a connection has dropped or is about to be created."],["StreamMetadataResult","Represents stream metadata as a series of properties for system data and user-defined metadata."],["SystemConsumerStrategy","System supported consumer strategies for use with persistent subscriptions."]],"struct":[["AllSlice","Represents a slice of the '$all' stream."],["Credentials","Holds login and password information."],["Endpoint",""],["EventData","Holds data of event about to be sent to the server."],["GossipSeed","Represents a source of cluster gossip."],["GossipSeedClusterSettings","Contains settings related to a cluster of fixed nodes."],["PersistentSubscriptionSettings","Gathers every persistent subscription property."],["Position","A structure referring to a potential logical record position in the GetEventStore transaction file."],["ReadEventResult","Represents the result of looking up a specific event number from a stream."],["RecordedEvent","Represents a previously written event."],["ResolvedEvent","A structure representing a single event or an resolved link event."],["Settings","Global connection settings."],["StreamAcl","Represents an access control list for a stream."],["StreamMetadata","Represents stream metadata with strongly types properties for system values and a dictionary-like interface for custom values."],["StreamMetadataBuilder","Used to facilitate the creation of a stream's metadata."],["StreamSlice","Represents the slice returned when reading a regular stream."],["Subscription","Represents the common operations supported by a subscription."],["TransactionId","The id of a transaction."],["VersionedMetadata","Represents a stream metadata."],["WriteResult","Returned after writing to a stream."]],"trait":[["Slice","Gathers common slice operations."],["SubscriptionConsumer","Represents the lifecycle of a subscription."],["SubscriptionEnv","Set of operations supported when consumming events from a subscription. Most of those operations are only available for persistent subscription, and will be no-op when used with either volatile or catchup subscriptions."]]});